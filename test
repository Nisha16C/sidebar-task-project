import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Server,
  Cpu,
  MemoryStick,
  HardDrive,
  Network,
  Info,
  Search,
  Filter,
  ChevronDown,
  ChevronUp,
  Copy,
  ExternalLink,
  Sparkles,
  Activity,
  Calendar,
  Tag,
  Layers,
  BarChart3,
  CpuIcon,
  Shield,
  AlertCircle,
  CheckCircle,
  XCircle,
  Clock,
  Loader2,
  X
} from 'lucide-react';

// Types
interface NodeLabel {
  node_name: string;
  labels: Record<string, string>;
  insights?: Record<string, string>;
}

interface NodeDetail {
  node_name: string;
  details: {
    creationTimestamp?: string;
    addresses: Record<string, string>;
    nodeInfo: {
      osImage: string;
      kernelVersion: string;
      kubeletVersion: string;
      containerRuntimeVersion: string;
    };
    capacity: {
      cpu: string;
      memory: string;
      pods: string;
    };
    conditions: Record<string, string>;
  };
}

interface ApiResponse<T> {
  nodes: T[];
}

// API Base URL
const API_BASE = 'https://10.0.2.37:8000';

const KubernetesNodeExplorer: React.FC = () => {
  // State
  const [nodes, setNodes] = useState<NodeLabel[]>([]);
  const [nodeDetails, setNodeDetails] = useState<Record<string, NodeDetail>>({});
  const [selectedNode, setSelectedNode] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [detailsLoading, setDetailsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredLabels, setFilteredLabels] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<'cards' | 'table'>('cards');
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());
  const [showInsights, setShowInsights] = useState(true);

  // Fetch all nodes with labels and insights
  const fetchNodes = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/labels/insights`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data: ApiResponse<NodeLabel> = await response.json();
      setNodes(data.nodes || []);
    } catch (error) {
      console.error('Error fetching nodes:', error);
      // Fallback to labels without insights if insights endpoint fails
      try {
        const response = await fetch(`${API_BASE}/labels`);
        if (response.ok) {
          const data: ApiResponse<NodeLabel> = await response.json();
          setNodes(data.nodes || []);
        }
      } catch (fallbackError) {
        console.error('Error fetching nodes without insights:', fallbackError);
      }
    } finally {
      setLoading(false);
    }
  };

  // Fetch details for a specific node
  const fetchNodeDetails = async (nodeName: string) => {
    if (nodeDetails[nodeName]) return; // Already fetched
    
    setDetailsLoading(true);
    try {
      const response = await fetch(`${API_BASE}/details?node=${nodeName}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data: NodeDetail = await response.json();
      setNodeDetails(prev => ({ ...prev, [nodeName]: data }));
    } catch (error) {
      console.error(`Error fetching details for node ${nodeName}:`, error);
    } finally {
      setDetailsLoading(false);
    }
  };

  // Toggle node expansion
  const toggleNodeExpansion = async (nodeName: string) => {
    if (expandedNodes.has(nodeName)) {
      const newSet = new Set(expandedNodes);
      newSet.delete(nodeName);
      setExpandedNodes(newSet);
    } else {
      const newSet = new Set(expandedNodes);
      newSet.add(nodeName);
      setExpandedNodes(newSet);
      await fetchNodeDetails(nodeName);
    }
  };

  // Filter nodes based on search term
  const filteredNodes = nodes.filter(node => 
    node.node_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    Object.keys(node.labels).some(key => 
      key.toLowerCase().includes(searchTerm.toLowerCase()) ||
      node.labels[key].toLowerCase().includes(searchTerm.toLowerCase())
    ) ||
    (node.insights && Object.values(node.insights).some(insight => 
      insight.toLowerCase().includes(searchTerm.toLowerCase())
    ))
  );

  // Load data on component mount
  useEffect(() => {
    fetchNodes();
  }, []);

  // Helper functions
  const formatMemory = (memory: string) => {
    if (!memory) return 'N/A';
    // Convert KiB to GiB for readability
    if (memory.endsWith('Ki')) {
      const num = parseInt(memory.replace('Ki', ''));
      return `${(num / 1024 / 1024).toFixed(2)} Gi`;
    }
    return memory;
  };

  const getConditionStatus = (conditions: Record<string, string>) => {
    const ready = conditions.Ready;
    if (ready === 'True') return 'ready';
    if (ready === 'False') return 'not-ready';
    return 'unknown';
  };

  const getConditionIcon = (status: string) => {
    switch (status) {
      case 'ready': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'not-ready': return <XCircle className="w-4 h-4 text-red-500" />;
      default: return <Clock className="w-4 h-4 text-yellow-500" />;
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    // You could add a toast notification here
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-blue-900/20 flex items-center justify-center">
        <div className="text-center">
          <div className="relative">
            <div className="w-16 h-16 border-4 border-blue-200 rounded-full animate-spin border-t-blue-600 mx-auto mb-4"></div>
          </div>
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">Loading Nodes</h3>
          <p className="text-gray-600 dark:text-gray-400">Discovering Kubernetes cluster nodes...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-blue-900/20 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8"
        >
          <div className="flex items-center space-x-4 mb-4 lg:mb-0">
            <div className="p-3 bg-gradient-to-r from-blue-500 to-cyan-600 rounded-2xl shadow-lg">
              <Server className="w-8 h-8 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
                Kubernetes Node Explorer
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                Explore node labels, details, and AI-powered insights
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setViewMode('cards')}
                className={`p-2 rounded-lg ${viewMode === 'cards' ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400' : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'}`}
              >
                <Layers className="w-5 h-5" />
              </button>
              <button
                onClick={() => setViewMode('table')}
                className={`p-2 rounded-lg ${viewMode === 'table' ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400' : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'}`}
              >
                <BarChart3 className="w-5 h-5" />
              </button>
            </div>

            <button
              onClick={() => setShowInsights(!showInsights)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${showInsights ? 'bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-400' : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400'}`}
            >
              <Sparkles className="w-4 h-4" />
              <span>AI Insights</span>
            </button>

            <button
              onClick={fetchNodes}
              className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700 text-white font-medium rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Refresh</span>
            </button>
          </div>
        </motion.div>

        {/* Search and Filter */}
        <motion.div 
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-6 mb-6"
        >
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search nodes, labels, or insights..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-xl text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600 dark:text-gray-400">
                {filteredNodes.length} node{filteredNodes.length !== 1 ? 's' : ''}
              </span>
            </div>
          </div>
        </motion.div>

        {/* Nodes Grid/Table */}
        {filteredNodes.length === 0 ? (
          <motion.div 
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-12 text-center"
          >
            <Server className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">No Nodes Found</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              {searchTerm ? 'Try adjusting your search query.' : 'No nodes available in the cluster.'}
            </p>
            <button
              onClick={fetchNodes}
              className="inline-flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700 text-white font-medium rounded-lg transition-all duration-200"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Refresh</span>
            </button>
          </motion.div>
        ) : viewMode === 'cards' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredNodes.map((node, index) => (
              <motion.div
                key={node.node_name}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 overflow-hidden"
              >
                {/* Node Header */}
                <div 
                  className="p-6 border-b border-gray-200 dark:border-gray-700 cursor-pointer"
                  onClick={() => toggleNodeExpansion(node.node_name)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="p-2 bg-gradient-to-r from-blue-500 to-cyan-600 rounded-lg">
                        <Server className="w-5 h-5 text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900 dark:text-white">
                          {node.node_name}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {Object.keys(node.labels).length} label{Object.keys(node.labels).length !== 1 ? 's' : ''}
                        </p>
                      </div>
                    </div>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleNodeExpansion(node.node_name);
                      }}
                      className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                    >
                      {expandedNodes.has(node.node_name) ? (
                        <ChevronUp className="w-5 h-5" />
                      ) : (
                        <ChevronDown className="w-5 h-5" />
                      )}
                    </button>
                  </div>
                </div>

                {/* Node Labels Preview */}
                <div className="p-6">
                  <div className="flex flex-wrap gap-2 mb-4">
                    {Object.entries(node.labels)
                      .slice(0, 3)
                      .map(([key, value]) => (
                        <span
                          key={key}
                          className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400"
                        >
                          <Tag className="w-3 h-3 mr-1" />
                          {key}: {value}
                        </span>
                      ))}
                    {Object.keys(node.labels).length > 3 && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400">
                        +{Object.keys(node.labels).length - 3} more
                      </span>
                    )}
                  </div>

                  <button
                    onClick={() => toggleNodeExpansion(node.node_name)}
                    className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg transition-colors"
                  >
                    <span>{expandedNodes.has(node.node_name) ? 'Show Less' : 'Show Details'}</span>
                  </button>
                </div>

                {/* Expanded Node Details */}
                <AnimatePresence>
                  {expandedNodes.has(node.node_name) && (
                    <motion.div
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: 'auto', opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      transition={{ duration: 0.3 }}
                      className="overflow-hidden"
                    >
                      <div className="p-6 border-t border-gray-200 dark:border-gray-700 space-y-6">
                        {detailsLoading ? (
                          <div className="flex justify-center py-4">
                            <Loader2 className="w-6 h-6 animate-spin text-blue-500" />
                          </div>
                        ) : nodeDetails[node.node_name] ? (
                          <>
                            {/* Node Details */}
                            <div>
                              <h4 className="font-semibold text-gray-900 dark:text-white mb-3 flex items-center">
                                <Info className="w-4 h-4 mr-2 text-blue-500" />
                                Node Details
                              </h4>
                              <div className="grid grid-cols-2 gap-4 text-sm">
                                <div className="space-y-2">
                                  <div className="flex items-center space-x-2">
                                    <Cpu className="w-4 h-4 text-gray-400" />
                                    <span>CPU: {nodeDetails[node.node_name].details.capacity?.cpu || 'N/A'}</span>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <MemoryStick className="w-4 h-4 text-gray-400" />
                                    <span>Memory: {formatMemory(nodeDetails[node.node_name].details.capacity?.memory)}</span>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <HardDrive className="w-4 h-4 text-gray-400" />
                                    <span>Pods: {nodeDetails[node.node_name].details.capacity?.pods || 'N/A'}</span>
                                  </div>
                                </div>
                                <div className="space-y-2">
                                  <div className="flex items-center space-x-2">
                                    <Activity className="w-4 h-4 text-gray-400" />
                                    <span>OS: {nodeDetails[node.node_name].details.nodeInfo?.osImage}</span>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <Shield className="w-4 h-4 text-gray-400" />
                                    <span>Kernel: {nodeDetails[node.node_name].details.nodeInfo?.kernelVersion}</span>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    {getConditionIcon(getConditionStatus(nodeDetails[node.node_name].details.conditions || {}))}
                                    <span>Status: {getConditionStatus(nodeDetails[node.node_name].details.conditions || {})}</span>
                                  </div>
                                </div>
                              </div>
                            </div>

                            {/* All Labels */}
                            <div>
                              <h4 className="font-semibold text-gray-900 dark:text-white mb-3 flex items-center">
                                <Tag className="w-4 h-4 mr-2 text-blue-500" />
                                All Labels
                              </h4>
                              <div className="space-y-2">
                                {Object.entries(node.labels).map(([key, value]) => (
                                  <div key={key} className="flex items-start justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                                    <div className="flex-1">
                                      <div className="font-medium text-gray-900 dark:text-white text-sm">{key}</div>
                                      <div className="text-gray-600 dark:text-gray-400 text-sm">{value}</div>
                                      {showInsights && node.insights && node.insights[key] && (
                                        <div className="mt-1 flex items-start space-x-2">
                                          <Sparkles className="w-3 h-3 text-purple-500 mt-0.5 flex-shrink-0" />
                                          <p className="text-xs text-purple-600 dark:text-purple-400">{node.insights[key]}</p>
                                        </div>
                                      )}
                                    </div>
                                    <button
                                      onClick={() => copyToClipboard(`${key}: ${value}`)}
                                      className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded"
                                    >
                                      <Copy className="w-3 h-3" />
                                    </button>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </>
                        ) : (
                          <div className="flex justify-center py-4">
                            <Loader2 className="w-6 h-6 animate-spin text-blue-500" />
                          </div>
                        )}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            ))}
          </div>
        ) : (
          /* Table View */
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 overflow-hidden"
          >
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 dark:bg-gray-700/50">
                  <tr>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Node
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Labels
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {filteredNodes.map((node) => (
                    <tr key={node.node_name} className="hover:bg-gray-50 dark:hover:bg-gray-700/30">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <Server className="w-5 h-5 text-blue-500 mr-2" />
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {node.node_name}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex flex-wrap gap-1">
                          {Object.entries(node.labels)
                            .slice(0, 2)
                            .map(([key, value]) => (
                              <span
                                key={key}
                                className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400"
                              >
                                <Tag className="w-3 h-3 mr-1" />
                                {key}
                              </span>
                            ))}
                          {Object.keys(node.labels).length > 2 && (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400">
                              +{Object.keys(node.labels).length - 2}
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {nodeDetails[node.node_name] ? (
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            getConditionStatus(nodeDetails[node.node_name].details.conditions || {}) === 'ready' 
                              ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-400'
                              : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-400'
                          }`}>
                            {getConditionStatus(nodeDetails[node.node_name].details.conditions || {})}
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-400">
                            unknown
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => toggleNodeExpansion(node.node_name)}
                          className="text-blue-600 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-300"
                        >
                          {expandedNodes.has(node.node_name) ? 'Hide Details' : 'View Details'}
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </motion.div>
        )}
      </div>
    </div>
  );
};

// Add the missing RefreshCw icon import
const RefreshCw = ({ className }: { className?: string }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
    <path d="M21 3v5h-5" />
    <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
    <path d="M8 16H3v5" />
  </svg>
);

export default KubernetesNodeExplorer;
